<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails Convention | Tsubasa Furukawa | Web Developer at Tealeaf Academy]]></title>
  <link href="http://tsufurukawa-blog.herokuapp.com/blog/categories/rails-convention/atom.xml" rel="self"/>
  <link href="http://tsufurukawa-blog.herokuapp.com/"/>
  <updated>2014-08-07T21:50:31-07:00</updated>
  <id>http://tsufurukawa-blog.herokuapp.com/</id>
  <author>
    <name><![CDATA[Tsubasa Furukawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Conventions - Part II]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/2014-05-09/part-ii/"/>
    <updated>2014-05-09T11:38:40-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/2014-05-09/part-ii</id>
    <content type="html"><![CDATA[<p>In the previous post we saw that we can pass in a file name such as <code>shared/content_file</code> into a partial, which will then render the <code>_content_file.html.erb</code> file allowing us to create content that is shared among many pages in our application. We can also pass in a local variable such as <code>title</code>, containing dynamic data that changes depending on what value we assign to the variable.</p>

<h4>Rendering Model Instances</h4>

<p>Things can get quite interesting when we pass in model instances to the partial. An example is taken from <a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Rails Guide</a>. Here <code>@customer</code> is an instance of the <code>Customer</code> model, which could&rsquo;ve been defined somewhere in the <code>CustomersController</code> like this <code>@customer = Customer.first</code>.</p>

<p><code>erb Ex 1: Rendering Instance Objects (Simplified Way)
&lt;%= render @customer %&gt;
</code></p>

<p>This code will render the partial <code>_customer.html.erb</code> inside <code>views/customers/customer</code> and will &ldquo;pass the local variable <code>customer</code> into the partial which will refer to the <code>@customer</code> in the parent view.&rdquo; Sounds complicated? Well yes, because it is! Essentially the above can be replaced by the following code, with syntax that we are slightly more familiar with.</p>

<p><code>erb Ex 2: Rendering Instance Objects (Explicit Way)
&lt;%= render 'customers/customer', customer: @customer %&gt;  
</code></p>

<p>By convention, when we pass in a model instance to a partial, Rails expects the partial to be named after the model (preceded with an underscore) placed inside a directory with a lowercase plural form of the model name (i.e. <code>customers</code>) &ndash; and this is precisely what we see in <em>Ex 2</em>. For the second argument, Rails created a local variable (named after the object model), and set it to the <code>@customer</code> instance variable. In a nutshell, Ex 1 is what we call <em>syntactic sugar</em> that saves us a few extra keystrokes.</p>

<h4>Rendering Collections (Array of Objects)</h4>

<p>Finally, let&rsquo;s say we have an array of objects (aka <em>collection</em>) that we would like to pass in to a partial, so that we can render content dynamically based on data encapsulated within the individual objects. Here is how we might initially approach this problem.</p>

<p><code>erb Ex 3: Rendering Collections (Long Way)
&lt;% categories = Category.all %&gt;
&lt;% categories.each do |category| %&gt;
  &lt;%= render 'categories/category', category: category %&gt;
&lt;% end %&gt;
</code></p>

<p>```erb Ex 4: Inside Partial (located inside app/views/categories/_category.html.erb)</p>

<p><p>This is the category name that changes depending on the objects that are passed in: &lt;%= category.name %></p>
```</p>

<p>By now, Ex 3 should be fairly comprehensible. <code>categories</code> is a collection of <code>category</code> instances. We iterate through the collection, and for every iteration, we render the partial while passing in the <code>category</code> local variable. Then inside the partial template, we can use the <code>category</code> local variable and extract attributes such as <code>name</code> from the object that the local variable is referencing.</p>

<p>Just like everything else in Rails, it turns out there is a shorthand syntax for this.</p>

<p><code>erb Ex 5: Rendering Collections (Short Way)
&lt;%= categories = Category.all %&gt;
&lt;%= render categories %&gt;
</code></p>

<p>That&rsquo;s it!!! Nice and clean. First, Rails recognizes that <code>categories</code> is a collection of objects from the <code>Category</code> model. Second, Rails determines the name of the partial to use by looking at the model name in the collection. Lastly, Rails allows access to each member of the collection, within individual instances of the partial, by assigning each member to a local variable named after the partial. Hence, the code in Ex 5 is entirely identical to the one in Ex 3. Rails Magic!!</p>

<h4>Aside</h4>

<p>Here is another quote I like that I once heard from Jeff Van Gundy, color commentator for ESPN. It turns out thoough, it was originally quoted by Ralph Waldo Emerson.</p>

<blockquote><p>“Your actions speak so loudly, I cannot hear what you are saying.”
<cite><sub> &ndash; Ralph Waldo Emerson</sub></cite></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Conventions - Part I]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/2014-05-08/rails-resources/"/>
    <updated>2014-05-08T22:33:15-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/2014-05-08/rails-resources</id>
    <content type="html"><![CDATA[<h4>Some Basic Rails Conventions</h4>

<p>Now, let&rsquo;s talk Rails. Rails is&hellip;interesting, to say the least. It&rsquo;s only been a week since I&rsquo;ve been exposed to the core ideology behind Rails, so I am far from knowing the ins and outs of the language. Rails is centered around the paradigm of <em>Convention Over Configuration</em>, which in layman&rsquo;s terms &ndash; follow the convention and you&rsquo;ll be grateful, and you&rsquo;re screwed if you don&rsquo;t. I think these conventions are what makes everything in Rails seem so magical, while simultaneously confusing. Until you wrap your head around the fact that a lot goes behind the scenes and some things you just have to take for granted, learning Rails could be quite a challenge.</p>

<p>Here, I present some crazy conventions that I encountered and initially had difficult time digesting; thus, I deemed important to take note.</p>

<p>In Rails (or any MVC framework for that matter), the <em>View</em> contains the content that will be rendered and returned to the browser as part of the HTTP response. An example erb template and the controller that renders the template, are shown below:</p>

<p><code>erb Example ERB Template Under app/views/posts/index.html.erb
&lt;%= @posts.each do |post| %&gt;
  &lt;h4&gt;Title: &lt;%= post.title %&gt; &lt;/h4&gt;
  &lt;p&gt;Description: &lt;%= post.description %&gt;&lt;/p&gt;
&lt;% end %&gt;
</code></p>

<p>``` ruby Posts Controller that Renders the View Template Above
class PostsController &lt; ApplicationController
  def index</p>

<pre><code>@posts = Post.all
</code></pre>

<p>  end
end
```</p>

<p>Here the <code>PostsController</code> is extracting all <code>Post</code> instances stored in the database called <code>posts</code> (named in such way by convention) and storing it in an instance variable called <code>@posts</code> allowing the erb template to access the data without directly communicating with the Model / Database layer. The template can then iterate through the <code>post</code> objects and display the data contained within those objects (which are essentially table rows when speaking on the database layer). So far, so good.</p>

<p>Every controller action maps to a respective view template (unless of course we redirect instead of render), so as an application grows in complexity, we can expect for code to get cluttered and we often find ourselves repeating the same code in multiple files. It turns out, we can create special templates called <em>partial</em>, in which we can embed the repetitive code. We can then <em>pull in</em> the partial from multiple files whenever we seek to access its content. A code is worth a million words, so here is an example:</p>

<p>``` erb Pulling In a Partial Inside app/views/posts/index.html.erb</p>

<p>This is my main content template, and I'm going to pull in the partial on the next line.</p>




<!-- Pull in the partial -->


<p>&lt;%= render &lsquo;shared/content_title&rsquo;, title: &lsquo;All Posts&rsquo; %></p>

<p>This paragraph will be rendered after the partial content</p>


<p>
```</p>

<p>``` erb The Partial That&rsquo;s Being Called Inside app/views/shared/_content_title.html.erb</p>

<h4>This is a Partial</h4>


<p><p>&lt;%= title %></p>
```</p>

<p>All partial files are named with a preceding underscore (again by convention), but strangely enough whenever we render the partial, it is called without the underscore, as shown by the top code. We are also passing a local variable <code>title</code> into the partial, which allows us to render code across multiple files that is similar in structure, but varies in content. Specifically, we can call this partial from any view file (such as show.html.erb or edit.html.erb), and by passing in different values for <code>title</code> we can render dynamic content while maintaining the structure of having the single <code>h4</code> and <code>p</code> tags.</p>

<h4>To Be Continued</h4>

<p>Since this post is getting WAAAY longer than I anticipated, I will continue this discussion on partials and how Rails convention can get a little convoluted on the next post.</p>
]]></content>
  </entry>
  
</feed>

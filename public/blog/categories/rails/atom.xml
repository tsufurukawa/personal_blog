<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Tsubasa Furukawa | Web Developer in Training]]></title>
  <link href="http://tsufurukawa-blog.herokuapp.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://tsufurukawa-blog.herokuapp.com/"/>
  <updated>2014-08-05T11:21:57-07:00</updated>
  <id>http://tsufurukawa-blog.herokuapp.com/</id>
  <author>
    <name><![CDATA[Tsubasa Furukawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deployment Pipeline]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/08/05/deployment-pipeline/"/>
    <updated>2014-08-05T09:40:40-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/08/05/deployment-pipeline</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feature Spec With Capybara]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/08/04/feature-spec-with-capybara/"/>
    <updated>2014-08-04T21:19:29-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/08/04/feature-spec-with-capybara</id>
    <content type="html"><![CDATA[<p>When designing a web application, or any computer software for that matter, having automated tests is absolutely critical. In general, tests can be broken down into 3 categories:</p>

<p><strong>1. Unit Tests</strong> &ndash; testing different components in isolation <br/>
<strong>2. Functional Tests</strong> &ndash; testing multiple components in collaboration and making sure individual components work well with each other<br/>
<strong>3. Integration Tests</strong> &ndash; following a business process and ensuring the components can work together to achieve a business objective</p>

<p>Now, in the context of Rails, these sections can be broken down as:<br/>
1. Models, Views, Helpers, Routes &ndash;> Unit Tests<br/>
2. Controllers &ndash;> Functional Tests<br/>
3. Emulating End User &ldquo;Browser Experience&rdquo; &ndash;> Integration Tests</p>

<p>In this blog post, we&rsquo;ll go through a simple feature spec using  <strong>Capybara</strong> with <strong>RSpec</strong>.</p>

<h4>Basic Setup</h4>

<p>Capybara helps us test web applications by simulating how a real user would interact with our app. It works seamlessly with RSpec, and most importantly, it&rsquo;s got an intuitive API that reads very cleanly. Let&rsquo;s look at an example.</p>

<p>Start off by installing the <code>capybara</code> and <code>capybara-email</code> gems inside your Gemfile.</p>

<p><code>ruby Ex1: Install Capybara in Gemfile
group :test do
  gem 'capybara'
  gem 'capybara-email'
end
</code></p>

<p>Next, inside <code>rails_helper.rb</code>, add these lines of code:</p>

<p><code>ruby Ex2: Inside Test Helper File
require 'capybara/rails'
require 'capybara/email/rspec'
</code></p>

<p>Lastly, create a file called <code>user_resets_password_spec.rb</code> inside the <code>spec/features</code> directory. We&rsquo;re now ready to start writing out the test!!!</p>

<p>As the name of the file suggests, this particular feature spec mimics the user experience of resetting his/her password. The basic setup of this feature spec is as follows:</p>

<p>```ruby Ex3: Setting Up &ldquo;Reset Password&rdquo; Spec
require &lsquo;rails_helper&rsquo;</p>

<p>feature &ldquo;User resets password&rdquo; do
  scenario &ldquo;user forgets and resets password successfully&rdquo; do</p>

<pre><code># Setup the data
user = Fabricate(:user, name: "Joe Smith", email: "test@example.com", password: "password")
clear_email
</code></pre>

<p>  end
end
```</p>

<p>Here, we&rsquo;re using an object generation library called <code>Fabrication</code> to generate the <code>user</code> object. The <code>clear_email</code> method is a convenient method given to us by the <code>capybara-email</code> gem, which simply clears the email message queue. (Note: Sending emails is a huge topic in and of itself, but basically whenever emails are sent using ActionMailer, they get stored in a message queue. We must clear this queue to ensure a clean slate and that any extraneous emails are wiped out.)</p>

<h4>Simulating the User Experience</h4>

<p>When a user forgets the password, the first thing he/she will do is to click on the &ldquo;Forgot Password?&rdquo; link. The sign-up for this particular app looks something like this, and the user experience can be mimicked with the following bit of code:</p>

<p><img class="center" src="/images/sign_up_form.png" width="400" height="350" title="&lsquo;sign_up_form&rsquo;" ></p>

<p><code>ruby Ex3: User Clicks on "Forgot Password" Link
visit sign_in_path
click_link "Forgot Password?"
</code></p>

<p>Notice how readable this code is!! This is the beauty of working with the Capybara API &ndash; even a non-programmer can read and decipher it.</p>

<p>Once the user clicks on the link, it will redirect to this page where the user is prompted to enter an email address. Then inside our server side code (specifically inside the <code>ForgotPasswordsController</code>, we send out an email with directions to reset the password if the said email address does indeed exist in our database.</p>

<p><img class="center" src="/images/forgot_password_form.png" width="600" height="260" title="&lsquo;forgot_password_form&rsquo;" ></p>

<p>The Capybara code that mimics this user experience is again very straightforward.</p>

<p><code>ruby Ex4: User Fills out Email Address
fill_in "Email Address", with: user.email
click_button "Send Email"
</code></p>

<p>Upon submission of the form, the user will receive an email with a <code>"Reset Password"</code> link. Clicking on this link will redirect the user to the &ldquo;Password Reset&rdquo; page where the user is prompted to enter a new password. This sequence of events is depicted with the following lines of code:</p>

<p>```ruby Ex5: User Clicks on &ldquo;Reset Password&rdquo; Link and Enters New Password
open_email(user.email)
current_email.click_link &ldquo;Reset Password&rdquo;</p>

<p>fill_in &ldquo;New Password&rdquo;, with: &ldquo;new password&rdquo;
click_button &ldquo;Reset Password&rdquo;
```</p>

<p><img class="center" src="/images/reset_password_form.png" width="550" height="260" title="&lsquo;reset_password_form&rsquo;" ></p>

<p>The <code>open_email</code> method finds the latest email sent to the specified address (<code>user.email</code>), and sets the <code>current_email</code> so that we can inspect its content.</p>

<p>Finally, the user will fill out the sign-in form with the <code>"new password"</code> to ensure he can successfully log in.</p>

<p><code>ruby Ex6: User Signs In with New Password
fill_in "Email Address", with: user.email
fill_in "Password", with: "new password"
click_button "Sign in"
expect(page).to have_content("Welcome #{user.name}!! You successfully signed in.")
clear_emails
</code></p>

<p>The <code>expect(page).to have_content(...)</code> is an <em>assertion</em>, which is basically a way of verifying if the results are what we expect.</p>

<p>The complete spec is as follows:</p>

<p>```ruby Ex7: The Complete Feature Spec for Resetting Password
require &lsquo;rails_helper&rsquo;</p>

<p>feature &ldquo;User resets password&rdquo; do
  scenario &ldquo;user forgets and resets password&rdquo; do</p>

<pre><code>user = Fabricate(:user, name: "Joe Smith", email: "test@example.com", password: "password")
clear_emails

visit sign_in_path
click_link "Forgot Password?" 

fill_in "Email Address", with: user.email
click_button "Send Email"

open_email(user.email)
current_email.click_link "Reset Password"

fill_in "New Password", with: "new password"
click_button "Reset Password"

fill_in "Email Address", with: user.email
fill_in "Password", with: "new password"
click_button "Sign in"
expect(page).to have_content("Welcome #{user.name}!! You successfully signed in.")

clear_emails
</code></pre>

<p>  end
end
```</p>

<h4>Summary</h4>

<p>As we saw from this example, Capybara has an extremely intuitive set of APIs that makes integration testing simple and even enjoyable (at times). Having automated tests helps guard against <em>regression</em>, a common problem in software development where an application stops functioning as intended after addition of a new feature. Automated testing can become quite tedious, especially during early stages of application development; however, without it, it is simply impossible to tell whether or not the entire system is bug-free after a new feature is introduced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Flavored Ajax]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/06/01/rails-flavored-ajax/"/>
    <updated>2014-06-01T18:28:07-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/06/01/rails-flavored-ajax</id>
    <content type="html"><![CDATA[<h4>Unobtrusive Javascript to Handle Ajax</h4>

<p>Ajax stands for Asynchronous Javascript and XML and is a way of sending and retrieving data from a server asynchronously. This is particularly useful when we have a page that is very expensive to load, and we want to update a small portion of the UI without having to reload the entire page from scratch. The basic ajax pattern consists of 3 parts:</p>

<ul>
<li>Unobtrusive javascript event listener (eg. <code>.click</code>)</li>
<li>Triggering Ajax request</li>
<li>Handling the response</li>
</ul>


<p>First, there must be some type of event handler that initiates the Ajax request, such as clicking on a link or submitting a form. Then, the request is sent to the server, and finally the response is generated and sent back to the browser. Unobtrusive javascript or jQuery has been used traditionally for handling Ajax calls. These are known as <em>client side code</em> because they live on the client-side, or on the browser. An example of such code is shown below where we ajaxify the submission of a form.</p>

<p>```javascript Ex1: Ajax with Unobtrusive Javascript
$(document).ready(function(){
  $(&lsquo;form#new_post&rsquo;).submit(function(e){</p>

<pre><code>$.ajax({
  type: 'POST',
  url: '/posts',
  data: { title: $('#post_title').val(),
          url: $('#post_url').val(),
          description: $('#post_description').val()
  },
}).done(function(msg) {
  // callback function 
})
e.preventDefault();
</code></pre>

<p>  });
});
```</p>

<p>In this example, we have a model-backed form with id <code>new_post</code> with the fields <code>title</code>, <code>url</code>, and <code>description</code>. The <code>.submit</code> is the event handler that triggers the Ajax request, and <code>.done</code> is the callback function that handles the response. The <code>data</code> (corresponding to the fields of the form) is wrapped in a hash and sent to the server. This method works perfectly fine, but notice how cumbersome the process is &ndash; we have to manually traverse the DOM and target the HTML elements (i.e. the event handler and the data parameters), every time we wish to issue a different Ajax call. Repeating this process can be time consuming and a bit annoying.</p>

<h4>How Rails Implements Ajax</h4>

<p>Rails drastically simplifies the implementation of Ajax. The Rails syntax for ajaxifying an element is by adding a <code>remote: true</code> attribute. For example, if we want to ajaxify a form submission as before, we would simply say <code>&lt;%= form_for @post, remote: true do |f| %&gt;</code>. The <code>remote: true</code> adds a <code>data-remote=true</code> attribute to the HTML element, which Rails' built-in javascript file uses to convert the form into an Ajax call. This step essentially generates a structure similar to the code in <code>Ex1</code>, and submits the request along with the data parameters.</p>

<p>We can then handle the request inside the <code>posts#create</code>, the controller action that handles the form submission.</p>

<p>```ruby Ex2: Handling the Ajax Request
def create
  @post = Post.new(post_params)</p>

<p>  respond_to do |format|</p>

<pre><code>format.html do 
  if @post.save
    flash[:notice] = "You successfully created a new post"
    redirect_to posts_path
  else
    render :new 
  end
end
format.js do 
  @post.save
end
</code></pre>

<p>  end
end
<code>``   
Since</code>remote: true<code>ajaxified the form, the client is expecting a javascript response. Rails segregates the response based on the format (eg: html, js, json, html) by using the</code>respond_to<code>method. The block inside</code>format.html<code>will be executed if the client wants HTML in response to the action; whereas, the block inside</code>format.js<code>will be executed for a javascript or Ajax response. As in any other controller action, Rails will by default render a template with the same name as the controller action (ie.</code>/posts/create.js.erb`). Inside this template, we can then write unobtrusive javascript that is then sent back to the browser.</p>

<p>The beauty of this template is that it lives on the <em>server side</em>, meaning we can write ruby code within these templates and access instance variables and other server-side data. This enables us to write code such as</p>

<p><code>javascript Ex3: Inside .js.erb Template
alert("The title of the post is: &lt;%= @post.title %&gt;");
</code>
where we are accessing the <code>@post</code> object and its attribute that live on the server. This is why Rails flavored Ajax is dubbed <em>Server-Generated Javascript Response (SJR)</em> &ndash; the javascript response is generated strictly on the server side, as opposed to unobtrusive javascript shown in <code>Ex1</code>, which handles the response on the client side using a callback function.</p>

<h4>Summmary</h4>

<p>The Rails way of implementing Ajax is a lot less manual and faster than the traditional jQuery method, but it&rsquo;s important to know that under the hood, the two methods are nearly identical. That is, by adding a <code>data-remote=true</code> attribute to an HTML element, Rails uses built-in javascript to convert the element into an Ajax call, which essentially builds the jQuery code from <code>Ex1</code> for us. We can then handle the response by rendering a <code>js.erb</code> file, where we have access to data and instance variables living on the server. The embedded ruby &ndash; javascript code is then converted into pure javascript and sent back to the browser.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication - Part II]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/05/22/authentication-part-part-ii/"/>
    <updated>2014-05-22T21:54:20-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/05/22/authentication-part-part-ii</id>
    <content type="html"><![CDATA[<p>In this post, we&rsquo;ll simulate a <code>login</code> and <code>logout</code> user interface by introducing a concept called <code>session</code>. A user&rsquo;s session is tracked using a cookie, which exists only in temporary memory while the user is logged in and navigating the website. When the user logs-out, the session cookie is then destroyed.</p>

<h4>Simulating the Login</h4>

<p>Before we create a form allowing users to login, we&rsquo;ll more than likely have to create routes that can handle the request. Now conceptually, we might at first be tempted to simulate login/logout using the <code>users</code> resource, but this is incorrect because we are not creating/updating/deleting, or performing CRUD actions, on a user object. Instead we need a resource that keeps track of the state of whether a user is logged-in or not. We will accomplish this using a <code>SessionsController</code> (the name is arbitrary), and we&rsquo;ll first manually define routes as following:</p>

<p><code>ruby Ex1: Building Resources Routes
get '/login', to: 'sessions#new'
post '/login', to: 'sessions#create'
get '/logout', to: 'sessions#destroy'
</code></p>

<p>Once we specify the necessary routes, we&rsquo;ll build the controller that handles the various routes. The <code>SessionsController</code> will consist of <code>new</code>, <code>create</code>, and <code>destroy</code> actions, which correspond to creation of login form, submission of login form, and logging-out, respectively. The <code>new</code> action and it&rsquo;s associated view template (<code>new.html.erb</code>) may look somethiing like this:</p>

<p>```ruby Ex2: &lsquo;new&rsquo; Action Inside SessionsController</p>

<h1>Inside SessionsController</h1>

<p>def new
end
```</p>

<p>```erb Ex3: &lsquo;new.html.erb&rsquo; &ndash; Form for Login</p>

<div class='well'>
  <%= form_tag '/login' do %>
    <div class='control-group'>
      <%= label_tag :username %>
      <%= text_field_tag :username %>
    </div>
    <div class='control-group'>
      <%= label_tag :password %>
      <%= password_field_tag :password %>
    </div>
    <%= submit_tag "Login", class: 'btn btn-success' %>
  <% end %>
</div>


<p>```</p>

<p>In <code>Ex:2</code>, we have an empty <code>new</code> action which simply renders the <code>new.html.erb</code> template by default. Inside our template, we have a non model-backed form &ndash; it is NOT model-backed because <code>sessions</code> is not an ActiveRecord object, meaning we don&rsquo;t have a <code>sessions</code> table in our database. The <code>form_tag '/login'</code> indicates that the the form will be submitted to <code>/login</code> with an HTTP method of <code>post</code>, which of course maps to <code>sessions#create</code>. The login form will look something like this:</p>

<p><img class="center" src="/images/login_form.png" width="350" height="350" title="&lsquo;login_form&rsquo;" ></p>

<p>Now, we will handle the submission of the form inside <code>sessions#create</code>. This code is reflected below:</p>

<p>```ruby Ex4: &lsquo;create&rsquo; Action Inside SessionsController
def create
  user = User.find_by(username: params[:username])</p>

<p>  if user &amp;&amp; user.authenticate(params[:password])</p>

<pre><code>flash[:notice] = "You successfully logged in."
session[:user_id] = user.id
redirect_to root_path
</code></pre>

<p>  else</p>

<pre><code>flash[:error] = "There's something wrong with your username or password."
redirect_to login_path
</code></pre>

<p>  end
end
```</p>

<p>When we submit the form, we gain access to the <code>params</code> hash that will look something like this: <code>{:username=&gt;'some username', :password=&gt;'some password'}</code>. In line 2, we check the database to see whether or not a <code>user</code> object with the specified username exists. Line 4 states that, if such user exists and if the submitted password matches the password stored in the database (ie. password that was stored when a user first registers, which is not shown in this blog post but accomplished via a model-backed user form with <code>username</code> and <code>password</code> fields), the authentication is sucessful. Line 6 is critical because the <code>session</code> tracks the logged-in user. It&rsquo;s also important that we NEVER save objects into a session because sessions are cookie-backed and cookies have a relatively meager 4KB size limit. This is why we&rsquo;re storing the <code>user_id</code> instead of the entire <code>user</code> object.</p>

<p>Using <code>session[:user_id]</code>, we can selectively display UI elements and hide certain elements that unauthenticated users shouldn&rsquo;t have access to. To facilitate this process, we&rsquo;ll introduce several methods in our <code>ApplicationController</code>.</p>

<p>```ruby Ex5: Some Methods Inside ApplicationController
class ApplicationController &lt; ActionController::Base
  helper_method :current_user, :logged_in?</p>

<p>  def current_user</p>

<pre><code>@current_user ||= User.find(session[:user_id]) if session[:user_id]
</code></pre>

<p>  end</p>

<p>  def logged_in?</p>

<pre><code>!!current_user
</code></pre>

<p>  end</p>

<p>  def require_user</p>

<pre><code>if !logged_in?
  flash[:error] = "Must be logged in to do that."
  redirect_to root_pth
end
</code></pre>

<p>  end
end
```</p>

<p>The <code>current_user</code> method checks to see whether or not <code>session[:user_id]</code> exists, and then returns the user object corresponding to that <code>user_id</code> if the session does indeed exist. If it doesn&rsquo;t, it will return <code>nil</code>. The <code>logged_in?</code> method converts what was returned from <code>current_user</code> into a boolean value &ndash; a <code>user</code> object into <code>true</code>, and <code>nil</code> into <code>false</code>. If we seek to suppress certain features in the UI we can use a conditional to display certain elements. For example, the link to create a new post should only be accessible when a user is logged in. This can be accomplished very easily inside the view template:</p>

<p><code>erb Ex6: Suppressing UI Elements in View Template
&lt;% if logged_in? %&gt;
  &lt;%= link_to 'New Post', new_post_path, class: 'btn btn-success' %&gt;
&lt;% end %&gt;
</code></p>

<p>Here we are calling the <code>logged_in?</code> method and displaying the <code>New Post</code> button only when the user is logged in. Notice that we have access to this method inside the template even though the method was defined inside <code>ApplicationController</code>. This is because we included <code>helper_method :current_user, :logged_in?</code> inside <code>ApplicationController</code>, which essentially copies the specified methods and moves them over to <code>ApplicationHelper</code>.</p>

<p>Up to this point, we have effectively hidden certain UI elements in our view templates to prevent unauthenticated users from accessing these elements. However, a user can still navigate to a URL such as <code>/posts/new</code>, which will then display a new post form, regardless of whether a user is logged in or not. To prevent this, we will call the <code>require_user</code> method inside all controller actions that should be prohibited from users that are logged-out. For example, we wouldn&rsquo;t want an unauthenticated user from creating, editing or updating a post, so we will call the <code>require_user</code> method in the <code>new</code>, <code>create</code>, <code>edit</code>, <code>update</code> actions inside our <code>PostsController</code>. This method will flash an error and prevent non-logged in users from accessing certain features.</p>

<p>To summarize, whenever we want to prohibit non-logged in users from performing certain actions, we have to suppress BOTH the UI element AND the route. We suppress the UI element by using an <code>if logged_in?</code> inside a view template, and we suppress the route by calling <code>require_user</code> inside a controller action.</p>

<h4>Simulating the Logout</h4>

<p>Simulating the logout is very easy. As we can see from our custom route, <code>get '/logout', to: 'sessions#destroy'</code>, logging out is handled by the <code>destroy</code> action inside <code>SessionsController</code>.</p>

<p><code>ruby Ex7: 'destroy' Action Inside SessionsControllers
def destroy
  session[:user_id] = nil
  flash[:notice] = "You've logged out"
  redirect_to root_path
end
</code></p>

<p>Here we simply set the <code>session[:user_id]</code> to <code>nil</code>. Now, whenever we call the <code>logged_in?</code> method from any of our view templates (like in <code>Ex6</code>), the UI element will not be displayed because the <code>current_user</code> method will return <code>nil</code>, which is then be converted to <code>false</code> by the <code>logged_in?</code> method.</p>

<h4>Summary</h4>

<p>In this post, we walked through the authentication system from scratch. We introduced the session to keep track of which user is logged in, and using this information, we were able to suppress certain features that should be unaccessible to unauthenticated users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication - Part I]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/05/22/authentication/"/>
    <updated>2014-05-22T20:15:01-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/05/22/authentication</id>
    <content type="html"><![CDATA[<h4>How Password Authentication Works</h4>

<p>The theory behind how authentication works in Rails is pretty straightforward. We save passwords through a <em>1-way hash</em>, meaning that we hash some string (ie. when user first registers) into a long undecipherable hash token. We then perform authentication, not by decrypting this hash token, but rather by hashing another string (ie. when user logs in) and then checking if the two hashes match.</p>

<p>It&rsquo;s important that we never store the actual password string (like &ldquo;password&rdquo;) in our database &ndash; we instead want to store a string representation of the password in the form of an undecipherable token. This is also called a <em>1-way hash digest</em>. When we authenticate, we compare the two digests, NOT the actual password string. In fact since the hashes are &ldquo;1-way&rdquo;, we cannot convert the digest back into the password string.</p>

<h4>How to Implement Authentication in Rails</h4>

<h6>1. Create <code>password_digest</code> Column in Database</h6>

<p>First, we need a column to keep track of the long token. This column must be called <code>password_digest</code>.</p>

<p><img class="left" src="/images/password_digest.png" width="350" height="350" title="&lsquo;users_table&rsquo;" ></p>

<p>This figure shows how a <code>users</code> table may be represented inside of a database. The <code>password_digest</code> attribute stores the long token or digest. The way we generate this token is through a gem called <code>bcrypt-ruby</code>, which uses a complicated hashing algorithm to convert a chunk of data (eg. your user&rsquo;s password) into an undecipherable string. Because this process is not reversible it&rsquo;s impossible to go from the hash back to the password.</p>

<h6>2. <code>has_secure_password</code> in Model</h6>

<p>At the model layer, we use the <code>has_secure_password</code> method to save the passwords in our database. <code>has_secure_password</code> uses the bcrypt gem to generate the one way hash.</p>

<p><code>ruby User Model with has_secure_password
class User &lt; ActiveRecord::Base
  has_secure_password validations: false
  validates :password, presence: true, on: :create, length: { minimum: 5 }
end
</code></p>

<p><code>has_secure_password</code> has built in validations, which may or may not be useful. In the code above, we remove the default validations by delcaring <code>validations: false</code>. We then declare our own validations manually (although this step is not necessary, it&rsquo;s recommended because it gives us better control of which validations to include and allows us to be more explicit in specifying the validations).</p>

<h6>3. Authenticate Using <code>.password</code> and <code>.authenticate</code></h6>

<p><code>has_secure_password</code> gives us a couple methods that allow us to complete the authentication process. The first is a <code>.password</code> virtual attribute setter method. By calling <code>.password</code> on a <code>user</code> object, <code>bcrypt</code> automatically hashes the password string, which is then stored under the <code>password_digest</code> column. It&rsquo;s noteworthy that there is no getter method for <code>.password</code>, which makes intuitive sense because the original password strings are unrecoverable.</p>

<p>The second method that <code>has_secure_password</code> give us is <code>.authenticate</code>. This method is similar to <code>.password</code> in that we pass in a string which automatically gets converted into a hash token. <code>.authenticate</code> will compare the submitted digest with the stored digest in our database. If the hash tokens match, it&rsquo;ll return the user object which evaluates to true; otherwise, it&rsquo;ll return false.</p>

<p>The following code shows these steps in action:</p>

<p>```ruby
u = User.new(&lsquo;bob&rsquo;)
u.password = &lsquo;password&rsquo; # using the &lsquo;.password&rsquo; setter method &ndash; sets &lsquo;password_digest&rsquo;
u.save # saves user object in database</p>

<p>user = User.find_by(username: &lsquo;bob&rsquo;) # looks for a &lsquo;bob&rsquo; user object from database
user.authenticate(&lsquo;some password&rsquo;) # returns false because the hash digests do not match
user.authenticate(&lsquo;password&rsquo;) # returns the &lsquo;bob&rsquo; user object because the hash digests do match
```</p>

<h4>Summary</h4>

<p>In this post, we talked about the theory of authentication and how Rails implements them in the database and model layers. In the next post, we&rsquo;ll use a practical example to see how this all comes together.</p>
]]></content>
  </entry>
  
</feed>

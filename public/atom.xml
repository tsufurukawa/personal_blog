<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tsubasa Furukawa | Web Developer in Training]]></title>
  <link href="http://tsufurukawa-blog.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://tsufurukawa-blog.herokuapp.com/"/>
  <updated>2014-05-09T18:27:55-07:00</updated>
  <id>http://tsufurukawa-blog.herokuapp.com/</id>
  <author>
    <name><![CDATA[Tsubasa Furukawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Part II - Rails Convention]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/05/09/part-ii/"/>
    <updated>2014-05-09T11:38:40-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/05/09/part-ii</id>
    <content type="html"><![CDATA[<p>In the previous post we saw that we can pass in a file name such as <code>shared/content_file</code> into a partial, which will then render the <code>_content_file.html.erb</code> file allowing us to create content that is shared amongst many pages in our application. We can also pass in a local variable such as <code>title</code> containing dynamic data that can change depending on what value we assign to the variable.</p>

<h4>Rendering Model Instances</h4>

<p>Things can get quite interesting when we pass in instance model objects to the partial. An example is taken from <a href="http://guides.rubyonrails.org/layouts_and_rendering.html">Rails Guide</a>. Here <code>@customer</code> is an instance of the <code>Customer</code> model, which could&rsquo;ve been defined somewhere in the <code>CustomersController</code> like this <code>@customer = Customer.first</code>.</p>

<figure class='code'><figcaption><span>Ex 1: Rendering Instance Objects (Simplified Way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="vi">@customer</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This code will render the partial <code>_customer.html.erb</code> inside <code>views/customers/customer</code> and will &ldquo;pass the local variable <code>customer</code> into the partial which will refer to the <code>@customer</code> in the parent view.&rdquo; Sounds complicated? Well yes, because it is! Essentially the above can be replaced by the following code, with syntax that we are slightly more familiar with.</p>

<figure class='code'><figcaption><span>Ex 2: Rendering Instance Objects (Explicit Way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;customers/customer&#39;</span><span class="p">,</span> <span class="ss">customer</span><span class="p">:</span> <span class="vi">@customer</span> <span class="cp">%&gt;</span><span class="x">  </span>
</span></code></pre></td></tr></table></div></figure>


<p>By convention, when we pass in a model instance object, Rails expects the partial to be named after the model (preceded with an underscore) placed inside a directory with a lowercase plural form of the model name (i.e. <code>customers</code>) &ndash; and this is precisely what we see in <em>Ex 2</em>. For the second argument, Rails created a local variable (named after the object model), and set it to the <code>@customer</code> instance variable. In a nutshell, Ex 1 is what we call <em>syntactic sugar</em> that saves us a few extra keystrokes.</p>

<h4>Rendering Collections (Array of Objects)</h4>

<p>Finally, let&rsquo;s say we have an array of objects (aka &lsquo;collection&rsquo;) that we would like to pass in to a partial, so that we can render content dynamically based on data encapsulated within the individual objects. Here is how we might initially approach this problem.</p>

<figure class='code'><figcaption><span>Ex 3: Rendering Collections (Long Way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">categories</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">all</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="n">categories</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;categories/category&#39;</span><span class="p">,</span> <span class="ss">category</span><span class="p">:</span> <span class="n">category</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span>Ex 4: Inside Partial (located inside app/views/categories/_category.html.erb) </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;p&gt;This is the category name that changes depending on the objects that are passed in: </span><span class="cp">&lt;%=</span> <span class="n">category</span><span class="o">.</span><span class="n">name</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By now, Ex 3 should be fairly comprehensible. <code>categories</code> is a collection of <code>category</code> instances. We iterate through the collection, and for every object, we render the partial while passing in the individual <code>category</code> instances that are assigned to a <code>category</code> local variable. Then inside the partial template, we can use the <code>category</code> local variable and extract attributes such as <code>name</code> from the object that the local variable is referencing.</p>

<p>Just like everything else in Rails, it turns out there is a shorthand syntax for this.</p>

<figure class='code'><figcaption><span>Ex 5: Rendering Collections (Short Way)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">categories</span> <span class="o">=</span> <span class="no">Category</span><span class="o">.</span><span class="n">all</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="n">categories</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it!!! Nice and clean. First, Rails recognizes that <code>categories</code> is a collection of objects from the <code>Category</code> model. Second, Rails determines the name of the partial to use by looking at the model name in the collection. Lastly, Rails allows access to each member of the collection, within individual instances of the partial, by assigning each member to a local variable named after the partial. Hence, the code in Ex 5 is entirely identical to the one in Ex 3. Rails Magic!!</p>

<h4>Aside</h4>

<p>Here is another quote I like that I once heard from Jeff Van Gundy, color commentator for ESPN. It turns out it was originally quoted by Ralph Waldo Emerson.</p>

<blockquote><p>“Your actions speak so loudly, I cannot hear what you are saying.”
<cite><sub> &ndash; Ralph Waldo Emerson</sub></cite></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Part I: Rails Conventions]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/05/08/rails-resources/"/>
    <updated>2014-05-08T22:33:15-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/05/08/rails-resources</id>
    <content type="html"><![CDATA[<h4>Some Basic Rails Conventions</h4>

<p>Now, let&rsquo;s talk Rails. Rails is&hellip;interesting, to say the least. It&rsquo;s only been a week since I&rsquo;ve been exposed to the core ideology behind Rails, so I am far from knowing the ins and outs of the language. Rails is centered around the paradigm of <em>Convention Over Configuration</em>, which in layman&rsquo;s terms &ndash; follow the convention and you&rsquo;ll be grateful, and you&rsquo;re screwed if you don&rsquo;t. I think these conventions are what makes everything in Rails seem so magical, while simultaneously confusing. Until you wrap your head around the fact that a lot goes behind the scenes and some things you just have to take for granted, learning Rails can be quite a challenge.</p>

<p>Here, I present some crazy conventions that I encountered and had difficult time digesting; thus, I deemed important to take note.</p>

<p>In Rails (or any MVC framework for that matter), the <em>View</em> contains the content that will be rendered and returned to the browser as part of the HTTP response. An example erb template and the controller that renders the template, are shown below:</p>

<figure class='code'><figcaption><span>Example ERB Template Under app/views/posts/index.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="vi">@posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;h4&gt;Title: </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">title</span> <span class="cp">%&gt;</span><span class="x"> &lt;/h4&gt;</span>
</span><span class='line'><span class="x">  &lt;p&gt;Description: </span><span class="cp">&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">description</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span><span class='line'><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Posts Controller that Renders the View Template Above</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the <code>PostsController</code> is extracting all <code>Post</code> instances stored in the database called <code>posts</code> (named in such way by convention) and storing it in an instance variable called <code>@posts</code> allowing the erb template to access the data without directly communicating with the Model / Database layer. The template can then iterate through the <code>Post</code> objects and display the data contained within those objects (which are essentially table rows when speaking on the database layer). So far, so good.</p>

<p>Every controller action maps to a respective view template (unless of course we redirect instead of render), so as an application grows in complexity, we can expect for code to get cluttered and we often find ourselves repeating the same code in multiple files. It turns out, we can create special templates called <em>partial</em>, in which we can embed the repetitive code. We can then &lsquo;pull in&rsquo; the partial from multiple files whenever we seek to access its content. A code is worth a million words, so here is an example:</p>

<figure class='code'><figcaption><span>Pulling In a Partial Inside app/views/posts/index.html.erb  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;p&gt;This is my main content template, and I&#39;m going to pull in the partial on the next line.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;!-- Pull in the partial --&gt;</span>
</span><span class='line'><span class="cp">&lt;%=</span> <span class="n">render</span> <span class="s1">&#39;shared/content_title&#39;</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;All Posts&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;This paragraph will be rendered after the partial content&lt;/p&gt; </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>The Partial That&#8217;s Being Called Inside app/views/shared/_content_title.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">&lt;h4&gt;This is a Partial&lt;/h4&gt;</span>
</span><span class='line'><span class="x">&lt;p&gt;</span><span class="cp">&lt;%=</span> <span class="n">title</span> <span class="cp">%&gt;</span><span class="x">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>All partial files are named with a preceding underscore (again by convention), but strangely enough whenever we render the partial, it is called without the underscore, as shown by the top code. We are also passing a local variable <code>title</code> into the partial, which allows us render code across multiple files that is similar in structure, but varies in content. Specifically, we can call this partial from any view file (such as show.html.erb, edit.html.erb, etc), and by passing in different values for <code>title</code> we can render dynamic content while maintaining the structure of having the single <code>h4</code> and <code>p</code> tags.</p>

<p>Since this post is getting WAAAY longer than I anticipated, I will continue this discussion on partials and how Rails convention can get a little convoluted on the next post.</p>

<p>I&rsquo;ve been digressing quite a bit, but quite frankly, I&rsquo;m starting to enjoy this process of articulating technical concepts because it helps me get accustomed to the web development / programming jargon, which is so So SO important in communicating with fellow developers. Anyways, in the next post I will discuss partials in greater detail and how Rails convention can get a little convoluted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post]]></title>
    <link href="http://tsufurukawa-blog.herokuapp.com/blog/2014/05/08/my-first-post/"/>
    <updated>2014-05-08T01:24:34-07:00</updated>
    <id>http://tsufurukawa-blog.herokuapp.com/blog/2014/05/08/my-first-post</id>
    <content type="html"><![CDATA[<h4>A Little About Me</h4>

<p>I&rsquo;m a basketball guy. I love playing ball, I love watching the Lakers, and I love playing fantasy basketball. In fact I love basketball so much that I&rsquo;m doing just that as I&rsquo;m writing this blog &ndash; watching Game 2 of Portland vs. San Antonio series. Well, it turns out my sentiments towards programming is just about the opposite. Or more precisely, it <em>was</em>. When I took my first progamming class 6 years ago, I was so lost, so frustrated and so annoyed, that I ended up with a C in the class. A <strong>C!!!!</strong> Granted, it was a C++ course, which by far is the hardest language I&rsquo;ve ever learned (let&rsquo;s face it, it&rsquo;s like Ruby on steroids), but to a guy who&rsquo;s never seen that infamous letter all throughout his educational career, getting a C was as big a surprise as the Spurs losing Game 6 of last year&rsquo;s NBA finals. Pardon me if I sounded a bit nerdy there. Point is, programming and I were like oil and water. We just didn&rsquo;t mix.</p>

<p>But here I am today, 5 weeks into an online Ruby on Rails Bootcamp called Tealeaf Academy. And frankly, I&rsquo;m loving every second of it. How I got here is a whole another story of it&rsquo;s own, but dedicating myself to learn web development is one of the best choices I&rsquo;ve made. In this short amount of time, Tealeaf has already provided me with a foundational knowledge in Ruby, web development, Rails, and more importantly, an appreciation, and at times enjoyment, for the art of coding. In 5 weeks!! Crazy!! And the journey&rsquo;s just begun.</p>

<p>This blog is to record the random tidbits of knowlege that I acquire from this course. I&rsquo;m hoping this acts as not only a mnemonic device for myself, but also as an yearbook of some sort &ndash; something I can look back on ten years from now and reminisce about how ignorant I was and realize how much I have grown since those days. We&rsquo;ll see how dedicated I am in keeping this blog up-to-date, but I&rsquo;m genuinely excited to see how my career as a web developer will unfold.</p>

<h4>Aside</h4>

<p>I&rsquo;m actually a big quote guy as well. Here is a quote that really reasonates with me, by the great Mahatma Gandhi and popularized by the equally great Coach John Wooden.</p>

<blockquote><p>“Live as if you were to die tomorrow. Learn as if you were to live forever.”
<cite><sub> &ndash; Mahatma Gandhi</sub></cite></p></blockquote>
]]></content>
  </entry>
  
</feed>
